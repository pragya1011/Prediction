# -*- coding: utf-8 -*-
"""Students_Performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17RpWu_7weSpWF34owjnHYdXN7_qLvg99
"""

import pandas as pd
import numpy as np
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import LabelEncoder

# Streamlit App
st.title("Student Performance Prediction")

# Load dataset (use @st.cache_data for caching)
@st.cache_data
def load_data():
    data_path = "/mnt/data/Student_performance_data _.csv"
    return pd.read_csv(data_path)

# Preprocessing function
@st.cache_data
def preprocess_data(data):
    # Encode categorical variables
    le = LabelEncoder()
    for column in ['Gender', 'Ethnicity', 'ParentalEducation', 'Tutoring', 'ParentalSupport', 'Extracurricular', 'Sports', 'Music', 'Volunteering']:
        data[column] = le.fit_transform(data[column])
    return data

# Load and preprocess the dataset
df = load_data()
df = preprocess_data(df)

# Define features and target
features = df.drop(columns=['StudentID', 'GPA', 'GradeClass'])
target_gpa = df['GPA']
target_grade = df['GradeClass']

# Train-test split
X_train, X_test, y_train_gpa, y_test_gpa = train_test_split(features, target_gpa, test_size=0.2, random_state=42)
X_train, X_test, y_train_grade, y_test_grade = train_test_split(features, target_grade, test_size=0.2, random_state=42)

# Ensure test labels are consistent with training
unique_train_labels = set(y_train_grade)
y_test_grade = y_test_grade.apply(lambda x: x if x in unique_train_labels else None)

# Remove rows with unseen labels in y_test_grade
X_test, y_test_grade = X_test[~y_test_grade.isnull()], y_test_grade[~y_test_grade.isnull()]

# Train Random Forest models
@st.cache_resource
def train_model(X, y):
    model = RandomForestRegressor(random_state=42)
    model.fit(X, y)
    return model

gpa_model = train_model(X_train, y_train_gpa)
grade_model = train_model(X_train, y_train_grade)

# Input dropdown for user type
user_type = st.selectbox("Choose", ["Student", "Teacher", "Administrator"])

if user_type == "Administrator":
    st.write("### Administrator Insights")
    total_students = df['StudentID'].nunique()
    avg_gpa = df['GPA'].mean()
    grade_distribution = df['GradeClass'].value_counts()

    st.write(f"Total Number of Students: {total_students}")
    st.write(f"Average GPA: {avg_gpa:.2f}")
    st.write("Grade Distribution:")
    st.bar_chart(grade_distribution)

elif user_type == "Teacher":
    st.write("### Teacher Insights")
    student_id = st.selectbox("Select StudentID", df['StudentID'])
    student_data = df[df['StudentID'] == student_id]

    st.write("Student Details:")
    st.write(student_data)

    if st.button("Show Graphical Representation"):
        st.line_chart(student_data.drop(columns=['StudentID']))

elif user_type == "Student":
    st.write("### Student Performance Prediction")
    gender = st.selectbox("Select Gender", ["Male", "Female"])
    age = st.selectbox("Select Age", list(range(10, 21)))

    if age not in range(15, 19):
        st.warning("Chosen wrong value, kindly choose between 15 and 18")
    else:
        study_time = st.selectbox("Select Weekly Study Time", ["0-5", "5-10", "10-15", "15-20"])
        absences = st.selectbox("Select Absences Range", ["0-5", "5-10", "10-15", "15-20", "25-30"])
        tutoring = st.selectbox("Receive Tutoring?", ["No", "Yes"])
        extracurricular = st.selectbox("Participate in Extracurricular Activities?", ["No", "Yes"])

        # Preprocess inputs
        input_data = pd.DataFrame({
            'Gender': [0 if gender == "Male" else 1],
            'Age': [age],
            'StudyTimeWeekly': [float(study_time.split('-')[1]) - 2.5],
            'Absences': [float(absences.split('-')[1]) - 2.5],
            'Tutoring': [0 if tutoring == "No" else 1],
            'Extracurricular': [0 if extracurricular == "No" else 1]
        })

        # Make predictions
        gpa_prediction = gpa_model.predict(input_data)[0]
        grade_prediction = grade_model.predict(input_data)[0]

        # Map numeric GradeClass to alphabet
        grade_map = {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E'}
        grade_letter = grade_map.get(round(grade_prediction), "Unknown")

        recommendations = {
            'A': "Performed good, keep it up!",
            'B': "Working hard, do not stop now!",
            'C': "There are chances of going higher, keep the motivation high!",
            'D': "Can do better, work harder and put more effort!",
            'E': "Needs improvement, focus on the priorities!"
        }
        st.write(f"Predicted GPA: {gpa_prediction:.2f}")
        st.write(f"Predicted Grade: {grade_letter}")
        st.write(f"Recommendation: {recommendations.get(grade_letter, 'No recommendation available.')}")

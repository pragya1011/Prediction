# -*- coding: utf-8 -*-
"""Students_Performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17RpWu_7weSpWF34owjnHYdXN7_qLvg99
"""

pip install -r requirements.txt

import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error

# Load the dataset from a Google Drive link
@st.cache_data
def load_data():
    gdrive_link = "https://drive.google.com/uc?id=1HnLCBBbmV3MRrSPARsFOx6kZCqpUCPEo"  # Replace with actual file ID
    try:
        data = pd.read_csv(gdrive_link)
        
        # Encoding categorical columns into numerical values
        le = LabelEncoder()
        data['Gender'] = le.fit_transform(data['Gender'])  # Male=0, Female=1
        data['Tutoring'] = le.fit_transform(data['Tutoring'])  # No=0, Yes=1
        data['Extracurricular'] = le.fit_transform(data['Extracurricular'])  # No=0, Yes=1
        grade_mapping = {0: "A", 1: "B", 2: "C", 3: "D", 4: "E"}
        data['GradeClass'] = data['GradeClass'].map(grade_mapping)
        return data
    except Exception as e:
        st.error(f"Error loading dataset: {e}")
        return pd.DataFrame()  # Return empty DataFrame if error occurs

student_data = load_data()

# Train a model (Random Forest Regressor) to predict GPA and Grade
def train_model(data):
    # Features: Gender, Age, StudyTimeWeekly, Absences, Tutoring, Extracurricular
    X = data[['Gender', 'Age', 'StudyTimeWeekly', 'Absences', 'Tutoring', 'Extracurricular']]
    y_gpa = data['GPA']
    y_grade = data['GradeClass'].apply(lambda x: ['A', 'B', 'C', 'D', 'E'].index(x))  # Convert grades to numeric
    
    # Split data into training and testing sets
    X_train, X_test, y_train_gpa, y_test_gpa, y_train_grade, y_test_grade = train_test_split(X, y_gpa, y_grade, test_size=0.2, random_state=42)
    
    # Initialize the RandomForest models for GPA and Grade prediction
    model_gpa = RandomForestRegressor(n_estimators=100, random_state=42)
    model_grade = RandomForestRegressor(n_estimators=100, random_state=42)
    
    # Train the models
    model_gpa.fit(X_train, y_train_gpa)
    model_grade.fit(X_train, y_train_grade)
    
    # Predict on test data
    predictions_gpa = model_gpa.predict(X_test)
    predictions_grade = model_grade.predict(X_test)
    
    # Calculate Mean Squared Error for evaluation
    mse_gpa = mean_squared_error(y_test_gpa, predictions_gpa)
    mse_grade = mean_squared_error(y_test_grade, predictions_grade)
    
    return model_gpa, model_grade, mse_gpa, mse_grade

# Train the model once the data is loaded
model_gpa, model_grade, mse_gpa, mse_grade = train_model(student_data)

# Function for Student View (prediction interface)
def student_view(data):
    st.subheader("Student Dashboard")

    # Select Gender
    gender = st.selectbox("Select Gender", ["Select an option", "Male", "Female"])
    if gender == "Select an option":
        return

    # Select Age
    age = st.selectbox("Select Age", ["Select an option"] + list(range(15, 19)))  # Allowable range is 15-18
    if age == "Select an option":
        return

    # Select Study Time Weekly
    study_time = st.selectbox("Select Study Time Weekly", ["Select an option", "0-5", "5-10", "10-15", "15-20"])
    if study_time == "Select an option":
        return
    study_time_min, study_time_max = {"0-5": (0, 5), "5-10": (5, 10), "10-15": (10, 15), "15-20": (15, 20)}.get(study_time, (0, 0))

    # Select Absences
    absences = st.selectbox("Select Absences", ["Select an option", "0-5", "5-10", "10-15", "15-20", "20-25", "25-30"])
    if absences == "Select an option":
        return
    absences_min, absences_max = {"0-5": (0, 5), "5-10": (5, 10), "10-15": (10, 15), "15-20": (15, 20), "20-25": (20, 25), "25-30": (25, 30)}.get(absences, (0, 0))

    # Select Tutoring
    tutoring = st.selectbox("Tutoring", ["Select an option", "No", "Yes"])
    if tutoring == "Select an option":
        return
    tutoring_value = {"No": 0, "Yes": 1}[tutoring]

    # Select Extracurricular
    extracurricular = st.selectbox("Extracurricular", ["Select an option", "No", "Yes"])
    if extracurricular == "Select an option":
        return
    extracurricular_value = {"No": 0, "Yes": 1}[extracurricular]

    # Prepare the input for prediction (convert to numeric format)
    gender_value = {"Male": 0, "Female": 1}[gender]
    X_new = pd.DataFrame([[gender_value, age, study_time_min, absences_min, tutoring_value, extracurricular_value]],
                         columns=['Gender', 'Age', 'StudyTimeWeekly', 'Absences', 'Tutoring', 'Extracurricular'])

    # Predict GPA and Grade Class
    predicted_gpa = model_gpa.predict(X_new)[0]
    predicted_grade_index = int(model_grade.predict(X_new)[0])
    predicted_grade = ['A', 'B', 'C', 'D', 'E'][predicted_grade_index]

    st.write(f"**Predicted GPA:** {predicted_gpa:.2f}")
    st.write(f"**Predicted Grade Class:** {predicted_grade}")

    # Recommendation based on grade
    recommendation = {
        "A": "Performed good, keep it up.",
        "B": "Working hard, do not stop now.",
        "C": "There are chances of going higher, keep the motivation high.",
        "D": "Can do better, work harder and put more effort.",
        "E": "Needs improvement, focus on the priorities."
    }
    st.write(f"**Recommendation:** {recommendation.get(predicted_grade, 'Focus on improving next time.')}")

# Streamlit Sidebar for Role Selection
if __name__ == "__main__":
    st.sidebar.title("Choose your Role")
    role = st.sidebar.radio("Select Role", ["Administrator", "Teacher", "Student"])

    if role == "Administrator":
        administrator_view(student_data)
    elif role == "Teacher":
        teacher_view(student_data)
    elif role == "Student":
        student_view(student_data)
